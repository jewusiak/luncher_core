name: Deploy to s.jewusiak.pl

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]

env:
  APP_NAME: "luncher-core"
  POSTGRES_NAME: "postgres-luncher-core"
  ELASTICSEARCH_NAME: "elasticsearch-luncher-core"
  SWAG_NAME: "swag-luncher-core-common"
  ENV_SUFFIX: "-pre"
  BASE_DOMAIN: "api.pre.luncher.pl"
  VOLUMES_DIR: "~/luncher-core-volumes-pre"
  
  # ssh host config
  SSH_HOST: "s.jewusiak.pl"
  SSH_USER: "github_uploads"

  VERSION: 3.0.1


jobs:
  elasticsearch_build:
    permissions:
      contents: 'read'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts

      - name: Build docker Image
        id: docker-build
        run: 'docker build -t ${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }}:${{ env.VERSION }} --file=Dockerfile-elasticsearch .'

      - name: Save Docker image
        run: 'docker save --output /tmp/${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }}_image.tar ${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }}:${{ env.VERSION }}'

      - name: Upload Docker image to remote server
        run: 'scp /tmp/${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }}_image.tar ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:images/${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }}_image.tar'

      - name: Load image
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker load --input images/${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }}_image.tar"'

  postgres_build:
    permissions:
      contents: 'read'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts

      - name: Build docker Image
        id: docker-build
        run: 'docker build -t ${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }}:${{ env.VERSION }} --file=Dockerfile-postgres .'

      - name: Save Docker image
        run: 'docker save --output /tmp/${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }}_image.tar ${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }}:${{ env.VERSION }}'

      - name: Upload Docker image to remote server
        run: 'scp /tmp/${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }}_image.tar ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:images/${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }}_image.tar'

      - name: Load image
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker load --input images/${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }}_image.tar"'


  test_app:
    #    needs: [ elasticsearch_build, postgres_build ]
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build test helper services images
        run: 'bash ./build_images_for_testing.sh'

      - name: Set up java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build & test
        run: 'mvn clean verify -Plocal_test'

  build_app:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with: 
          repository: 'jewusiak/luncher_core_config'
          ref: master
          path: pulled_configs

      - name: Checkout
        uses: actions/checkout@v2

      - name: Copy configs
        run: 'cp pulled_configs/application-s_pre.properties src/main/resources/application-s_pre.properties'
        
      - name: ls home
        run: 'ls ./'

      - name: ls pulled
        run: 'ls pulled_configs'

      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts

      - name: Build docker Image
        id: docker-build
        run: 'docker build -t ${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}:${{ env.VERSION }} --file=Dockerfile-s_pre .'

      - name: Save Docker image
        run: 'docker save --output /tmp/${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}_image.tar ${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}:${{ env.VERSION }}'

      - name: Upload Docker image to remote server
        run: 'scp /tmp/${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}_image.tar ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:images/${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}_image.tar'

      - name: Load image
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker load --input images/${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}_image.tar"'

  environment_setup:
    permissions:
      contents: 'read'

    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts

      - name: Create Network
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker network inspect ${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}_net >/dev/null 2>&1 || docker network create --driver bridge ${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}_net"'

      - name: Create volumes dir
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "mkdir -p ${{ env.VOLUMES_DIR }}/{${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }},${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }},${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}}"'

  stop_old_apps:
    needs: [ elasticsearch_build, postgres_build, build_app, test_app, environment_setup ]
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts

      - name: Stop old app
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker stop ${{ env.APP_NAME }}${{ env.ENV_SUFFIX }} || true"'

      - name: Stop old postgres
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker stop ${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }} || true"'

      - name: Stop old elasticsearch
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker stop ${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }} || true"'


  deploy_postgres:
    needs: [ stop_old_apps ]
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts

      - name: Run new postgres
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker run --rm -d --name ${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }} --net=${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}_net -e \"POSTGRES_DB=luncher_core_pre\" -e \"POSTGRES_USER=luncher_core_pre_apiuser\" -e \"POSTGRES_PASSWORD=EHa56TpJXo#qog\" -v ${{env.VOLUMES_DIR}}/${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }}/data:/var/lib/postgresql/data ${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }}:${{ env.VERSION }}"'

      - name: Wait for postgres to start
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          echo \"sleep begin\"
          sleep 5
          bash monitor.sh ${{ env.POSTGRES_NAME }}${{ env.ENV_SUFFIX }}
          "

  deploy_elasticsearch:
    needs: [ stop_old_apps ]
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts

      - name: Run new elasticsearch
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker run --rm -d --name ${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }} --group-add 1000 --net=${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}_net -e \"discovery.type=single-node\" -e \"xpack.security.enabled=false\" -v ${{env.VOLUMES_DIR}}/${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }}/data:/usr/share/elasticsearch/data ${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }}:${{ env.VERSION }}"'

      - name: Wait for elasticsearch to start
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          echo \"sleep begin\"
          sleep 5
          bash monitor.sh ${{ env.ELASTICSEARCH_NAME }}${{ env.ENV_SUFFIX }}
          "

  deploy_main_app:
    needs: [ deploy_elasticsearch, deploy_postgres ]
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts

      - name: Run Docker application
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker run --rm -d --name ${{ env.APP_NAME }}${{ env.ENV_SUFFIX }} --net=${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}_net -v ${{env.VOLUMES_DIR}}/${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}:/uploaded-assets ${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}:${{ env.VERSION }}"'

      - name: Wait for application to start
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "
          echo \"sleep begin\"
          sleep 5
          bash monitor.sh ${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}
          "
          
          
  setup-swag:
    needs: [deploy_main_app]
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts
        
      - name: Stop Swag if exists
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker stop ${{ env.SWAG_NAME }} || true"'
        
      - name: Remove swag config if exists
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "rm -f ~/${{ env.SWAG_NAME }}/nginx/proxy-confs/api_pre_s.subdomain.conf || true"'
        
      - name: Setup Swag
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker run --rm -d --name ${{ env.SWAG_NAME }} -e PUID=1000 -e PGID=1000 -e TZ=Etc/UTC -e URL=s.jewusiak.pl -e EXTRA_DOMAINS=api.pre.luncher.pl,admin.pre.luncher.pl,pre.luncher.pl -e VALIDATION=http -e EMAIL="grzegorz@jewusiak.pl" -e CERTPROVIDER=zerossl -p "443:443" -p "80:80" -v ~/${{ env.SWAG_NAME }}:/config --net ${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}_net linuxserver/swag"'

      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Replace placeholders in proxy config
        run: |
          sed -i -e 's!SRVNAME1!${{ env.BASE_DOMAIN }}!g' src/main/resources/api_pre_s.subdomain.conf
          sed -i -e 's!PRXYPASS1!http://${{ env.APP_NAME }}${{ env.ENV_SUFFIX }}:8080!g' src/main/resources/api_pre_s.subdomain.conf
      
      - name: Insert proxy config
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "mkdir -p ~/${{ env.SWAG_NAME }}/nginx/proxy-confs"
          scp src/main/resources/api_pre_s.subdomain.conf ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:~/${{ env.SWAG_NAME }}/nginx/proxy-confs/
      
      - name: Restart Swag
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker restart ${{ env.SWAG_NAME }}"'
      

  cleanup_docker_imgs:
    needs: [ setup-swag ]
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts

      - name: Remove dangling Docker images
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "docker image prune -f || true"'

  cleanup_imgs_upload_dir:
    needs: [ elasticsearch_build, postgres_build, build_app ]
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.S_JEWUSIAK_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan s.jewusiak.pl >> ~/.ssh/known_hosts

      - name: Remove dangling Docker images
        run: 'ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} "rm -rf ~/images/* || true"'
